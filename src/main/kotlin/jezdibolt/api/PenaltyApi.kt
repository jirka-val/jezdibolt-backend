package jezdibolt.api

import io.ktor.http.*
import io.ktor.server.application.*
import io.ktor.server.auth.*
import io.ktor.server.request.*
import io.ktor.server.response.*
import io.ktor.server.routing.*
import jezdibolt.model.PenaltyDTO
import jezdibolt.service.HistoryService
import jezdibolt.service.PenaltyService
import jezdibolt.util.authUser

fun Application.penaltyApi(penaltyService: PenaltyService = PenaltyService()) {
    routing {
        route("/penalties") {
            authenticate("auth-jwt") {

                // üîπ Naƒçten√≠ pokut (voliteln√© filtrov√°n√≠ podle paid=true/false)
                get {
                    val user = call.authUser() ?: return@get call.respond(HttpStatusCode.Unauthorized)
                    val paidParam = call.request.queryParameters["paid"]?.lowercase()
                    val paidFilter = when (paidParam) {
                        "true" -> true
                        "false" -> false
                        else -> null
                    }

                    val penalties = penaltyService.getAllPenalties(paidFilter)

                    call.application.log.info("‚öñÔ∏è ${user.email} (${user.role}) naƒçetl seznam pokut (filter=$paidFilter)")
                    call.respond(HttpStatusCode.OK, penalties)
                }

                // üîπ Vytvo≈ôen√≠ nov√© pokuty
                post {
                    val user = call.authUser() ?: return@post call.respond(HttpStatusCode.Unauthorized)
                    val penalty = call.receive<PenaltyDTO>()
                    val created = penaltyService.createPenalty(penalty)

                    // üßæ Z√°znam do historie
                    HistoryService.log(
                        adminId = user.id,
                        action = "CREATE_PENALTY",
                        entity = "Penalty",
                        entityId = created.id,
                        details = "U≈æivatel ${user.email} (${user.role}) vytvo≈ôil pokutu ID=${created.id} pro userId=${penalty.userId}"
                    )

                    // ‚úÖ Realtime ozn√°men√≠
                    WebSocketConnections.broadcast("""{"type":"penalty_created","id":${created.id}}""")

                    call.application.log.info("üö® ${user.email} vytvo≈ôil pokutu #${created.id}")
                    call.respond(HttpStatusCode.Created, created)
                }

                // üîπ Oznaƒçen√≠ pokuty jako zaplacen√©
                patch("{id}/pay") {
                    val user = call.authUser() ?: return@patch call.respond(HttpStatusCode.Unauthorized)
                    val id = call.parameters["id"]?.toIntOrNull()
                        ?: return@patch call.respond(HttpStatusCode.BadRequest, "Invalid penalty ID")

                    val resolverId = call.request.queryParameters["resolverId"]?.toIntOrNull()
                    val success = penaltyService.markAsPaid(id, resolverId)

                    if (success) {
                        // üßæ Log
                        HistoryService.log(
                            adminId = user.id,
                            action = "PAY_PENALTY",
                            entity = "Penalty",
                            entityId = id,
                            details = "U≈æivatel ${user.email} (${user.role}) oznaƒçil pokutu ID=$id jako zaplacenou"
                        )

                        // ‚úÖ Realtime notifikace
                        WebSocketConnections.broadcast("""{"type":"penalty_paid","id":$id}""")

                        call.application.log.info("üí∏ ${user.email} oznaƒçil pokutu $id jako zaplacenou")
                        call.respond(HttpStatusCode.OK, mapOf("status" to "paid"))
                    } else {
                        call.respond(HttpStatusCode.NotFound, mapOf("error" to "Penalty not found"))
                    }
                }
            }
        }
    }
}
